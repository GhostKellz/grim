-- plugins/lsp/lsp-config.gza
-- LSP Configuration and keybinding documentation
--
-- This plugin documents the built-in LSP integration in Grim.
-- LSP features are implemented natively in SimpleTUI's EditorLSP.
--
-- Built-in LSP Keybindings:
--   gd          - Go to definition
--   H           - Show hover information (displayed in statusline)
--   Ctrl+Space  - Trigger completion popup
--   Ctrl+A      - Show code actions menu
--   Ctrl+I      - Toggle inlay hints
--
-- Automatic Features:
--   - Diagnostics displayed in gutter (E/W/I/H markers)
--   - Real-time diagnostics via textDocument/didChange
--   - Completion on trigger characters (., :, (, etc.)
--   - Signature help on ( and ,
--
-- Supported LSP Servers:
--   - zls (Zig Language Server)
--   - rust-analyzer (Rust)
--   - typescript-language-server (JavaScript/TypeScript)
--   - pylsp (Python)
--   - clangd (C/C++)
--   - ghostls (Ghostlang)

local autocmd = autocmd or function(event, pattern, callback)
    print(string.format("[lsp-config] Register autocmd: %s %s", tostring(event), tostring(pattern)))
    return true
end

local command = command or function(name, callback, opts)
    print(string.format("[lsp-config] Register command: %s", tostring(name)))
    return true
end

local vim = vim or {}
if type(vim.tbl_keys) ~= "function" then
    function vim.tbl_keys(tbl)
        local keys = {}
        if type(tbl) == "table" then
            for key in pairs(tbl) do
                table.insert(keys, key)
            end
        end
        table.sort(keys)
        return keys
    end
end

local plugin = {
    name = "lsp.config",
    version = "0.1.0",
}

-- Server configurations (for reference - servers auto-start on file open)
local servers = {
    zig = {
        cmd = "zls",
        root_markers = { "build.zig", ".git" },
        note = "Zig Language Server - provides completion, hover, diagnostics",
    },
    rust = {
        cmd = "rust-analyzer",
        root_markers = { "Cargo.toml", ".git" },
        note = "Rust Language Server - full IDE features for Rust",
    },
    javascript = {
        cmd = "typescript-language-server",
        root_markers = { "package.json", ".git" },
        note = "TypeScript/JavaScript LSP",
    },
    typescript = {
        cmd = "typescript-language-server",
        root_markers = { "package.json", "tsconfig.json", ".git" },
        note = "TypeScript LSP with full type checking",
    },
    python = {
        cmd = "pylsp",
        root_markers = { "pyproject.toml", "setup.py", ".git" },
        note = "Python Language Server",
    },
    c = {
        cmd = "clangd",
        root_markers = { "compile_commands.json", ".git" },
        note = "Clang-based C/C++ Language Server",
    },
    cpp = {
        cmd = "clangd",
        root_markers = { "compile_commands.json", ".git" },
        note = "Clang-based C/C++ Language Server",
    },
    ghostlang = {
        cmd = "ghostls",
        root_markers = { ".git" },
        note = "Ghostlang LSP v0.4.0 - completion, hover, GShell FFI",
    },
}

-- Initialize function called when plugin loads
function plugin.setup(opts)
    opts = opts or {}

    -- Note: LSP integration is built into SimpleTUI's EditorLSP
    -- Servers auto-start when files are opened based on detected language
    -- This plugin just documents the available features and servers

    print("[lsp-config] LSP integration ready!")
    print("[lsp-config] Supported languages: " .. table.concat(vim.tbl_keys(servers), ", "))
    print("[lsp-config] Keybindings:")
    print("[lsp-config]   gd - Go to definition")
    print("[lsp-config]   H  - Show hover")
    print("[lsp-config]   Ctrl+Space - Completion")
    print("[lsp-config]   Ctrl+A - Code actions")
    print("[lsp-config]   Ctrl+I - Toggle inlay hints")
    print("[lsp-config] Diagnostics shown in gutter: E=Error, W=Warning, I=Info, H=Hint")
end

return plugin
