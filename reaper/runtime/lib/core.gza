-- runtime/lib/core.gza
-- Core Ghostlang helpers for Phantom.grim configuration loading

local core = {}
local grim = require("grim.bridge")
local state = {
    initialized = false,
    loaded = {},
    history = [],
}

local function normalize_name(name)
    return (name or ""):gsub("/", ".")
end

local function candidate_modules(name)
    -- WORKAROUND: Ghostlang 0.2.0 has memory leaks with array literals
    -- Build path from category.name format (e.g. "git.neogit" -> "plugins.git.neogit")
    local normalized = normalize_name(name)

    -- The name is in format "category.plugin-name"
    -- We need to map it to "plugins.category.plugin-name"
    local module_path = "plugins." .. normalized

    return module_path
end

local function record_attempt(module_name, ok, err)
    -- DISABLED: Ghostlang push() has memory corruption bugs
    -- TODO: Re-enable when Ghostlang stdlib is fixed
    -- push(state.history, {
    --     module = module_name,
    --     ok = ok,
    --     err = err,
    -- })
end

local function try_require(module_name)
    local ok, result = pcall(require, module_name)
    record_attempt(module_name, ok, ok and nil or result)
    return ok, result
end

function core.init(opts)
    if state.initialized then
        return state
    end

    opts = opts or {}
    state.initialized = true
    state.opts = opts

    if opts.verbose then
        print("[core] Phantom.grim core runtime ready")
    end

    state.bridge = grim

    return state
end

function core.load_plugin(name)
    core.init(state.opts)

    if state.loaded[name] then
        return state.loaded[name]
    end

    -- Get the module path (now returns a single string instead of array)
    local module_name = candidate_modules(name)
    local ok, result = try_require(module_name)

    if ok then
        state.loaded[name] = result or true
        return state.loaded[name]
    end

    -- Failed to load
    print("[core] Failed to load plugin " .. name .. ": " .. tostring(result))
    return nil
end

function core.ensure_plugins(list)
    for _, name in ipairs(list or {}) do
        core.load_plugin(name)
    end
end

function core.is_loaded(name)
    return state.loaded[name] ~= nil
end

function core.loaded_plugins()
    -- DISABLED: Ghostlang push() has memory corruption bugs
    -- TODO: Return actual plugin list when Ghostlang stdlib is fixed
    return []
end

function core.history()
    return state.history
end

function core.reset()
    state.initialized = false
    state.loaded = {}
    state.history = []
    state.opts = nil
    state.bridge = nil
end

function core.bridge()
    return state.bridge
end

return core
