-- Status Line Plugin
-- Customizable status line with real-time updates

-- Plugin state
var config = {
    show_git = true,
    show_lsp = true,
    show_mode = true,
    show_position = true,
    format = "{mode} {git} {file} {lsp} {position}"
}

-- Setup plugin
function setup()
    print("Status Line plugin loaded!")

    -- Load user config if provided
    if grim.config.exists("status_line") then
        config = grim.config.get("status_line")
    end

    -- Register status line renderer
    grim.status_line.register(render_status_line)

    -- Register commands
    grim.command("StatusLineToggleGit", toggle_git)
    grim.command("StatusLineToggleLSP", toggle_lsp)

    -- Subscribe to events for live updates
    grim.on("BufEnter", update_status)
    grim.on("CursorMoved", update_status)
    grim.on("ModeChanged", update_status)
end

-- Main render function
function render_status_line()
    var components = []

    -- Mode indicator
    if config.show_mode then
        local mode = get_mode_component()
        components.push(mode)
    end

    -- Git branch/status
    if config.show_git then
        local git = get_git_component()
        if git ~= "" then
            components.push(git)
        end
    end

    -- File name
    local file = get_file_component()
    components.push(file)

    -- LSP status
    if config.show_lsp then
        local lsp = get_lsp_component()
        if lsp ~= "" then
            components.push(lsp)
        end
    end

    -- Cursor position
    if config.show_position then
        local pos = get_position_component()
        components.push(pos)
    end

    return components.join(" | ")
end

-- Mode component
function get_mode_component()
    local mode = grim.mode.current()

    local mode_map = {
        normal = "NORMAL",
        insert = "INSERT",
        visual = "VISUAL",
        command = "COMMAND"
    }

    return mode_map[mode] or "UNKNOWN"
end

-- Git component
function get_git_component()
    if not grim.git.is_available() then
        return ""
    end

    local branch = grim.git.current_branch()
    if branch == "" then
        return ""
    end

    local status = grim.git.status()
    var indicator = ""

    if status.modified > 0 then
        indicator = indicator .. "~" .. status.modified
    end
    if status.added > 0 then
        indicator = indicator .. "+" .. status.added
    end

    if indicator ~= "" then
        return " " .. branch .. " " .. indicator
    end

    return " " .. branch
end

-- File component
function get_file_component()
    local file = grim.buffer.current_file()

    if file == "" then
        return "[No File]"
    end

    -- Show basename only
    local basename = grim.path.basename(file)

    -- Add modified indicator
    if grim.buffer.is_modified() then
        return basename .. " [+]"
    end

    return basename
end

-- LSP component
function get_lsp_component()
    if not grim.lsp.is_active() then
        return ""
    end

    local diagnostics = grim.lsp.diagnostics()

    if diagnostics.error > 0 then
        return " E:" .. diagnostics.error
    end
    if diagnostics.warning > 0 then
        return " W:" .. diagnostics.warning
    end

    return " âœ“"
end

-- Position component
function get_position_component()
    local pos = grim.cursor.position()
    local total = grim.buffer.line_count()

    return pos.line .. ":" .. pos.col .. " / " .. total
end

-- Update status line
function update_status()
    grim.status_line.refresh()
end

-- Commands
function toggle_git()
    config.show_git = not config.show_git
    update_status()
    grim.notify("Git info " .. (config.show_git and "enabled" or "disabled"))
end

function toggle_lsp()
    config.show_lsp = not config.show_lsp
    update_status()
    grim.notify("LSP info " .. (config.show_lsp and "enabled" or "disabled"))
end

-- Teardown
function teardown()
    print("Status Line plugin unloaded!")
end
