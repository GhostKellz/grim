// Status Line Plugin
// Customizable status line with real-time updates

// Plugin state
var config = {
    show_git: true,
    show_lsp: true,
    show_mode: true,
    show_position: true,
    format: "{mode} {git} {file} {lsp} {position}"
}

// Setup plugin
export fn setup() {
    print("Status Line plugin loaded!")

    // Load user config if provided
    if grim.config.exists("status_line") {
        config = grim.config.get("status_line")
    }

    // Register status line renderer
    grim.status_line.register(render_status_line)

    // Register commands
    grim.command("StatusLineToggleGit", toggle_git)
    grim.command("StatusLineToggleLSP", toggle_lsp)

    // Subscribe to events for live updates
    grim.on("BufEnter", update_status)
    grim.on("CursorMoved", update_status)
    grim.on("ModeChanged", update_status)
}

// Main render function
fn render_status_line() {
    var components = []

    // Mode indicator
    if config.show_mode {
        const mode = get_mode_component()
        components.push(mode)
    }

    // Git branch/status
    if config.show_git {
        const git = get_git_component()
        if git != "" {
            components.push(git)
        }
    }

    // File name
    const file = get_file_component()
    components.push(file)

    // LSP status
    if config.show_lsp {
        const lsp = get_lsp_component()
        if lsp != "" {
            components.push(lsp)
        }
    }

    // Cursor position
    if config.show_position {
        const pos = get_position_component()
        components.push(pos)
    }

    return components.join(" | ")
}

// Mode component
fn get_mode_component() {
    const mode = grim.mode.current()

    const mode_map = {
        "normal": "NORMAL",
        "insert": "INSERT",
        "visual": "VISUAL",
        "command": "COMMAND"
    }

    return mode_map[mode] or "UNKNOWN"
}

// Git component
fn get_git_component() {
    if !grim.git.is_available() {
        return ""
    }

    const branch = grim.git.current_branch()
    if branch == "" {
        return ""
    }

    const status = grim.git.status()
    var indicator = ""

    if status.modified > 0 {
        indicator = indicator + "~" + status.modified
    }
    if status.added > 0 {
        indicator = indicator + "+" + status.added
    }

    if indicator != "" {
        return " " + branch + " " + indicator
    }

    return " " + branch
}

// File component
fn get_file_component() {
    const file = grim.buffer.current_file()

    if file == "" {
        return "[No File]"
    }

    // Show basename only
    const basename = grim.path.basename(file)

    // Add modified indicator
    if grim.buffer.is_modified() {
        return basename + " [+]"
    }

    return basename
}

// LSP component
fn get_lsp_component() {
    if !grim.lsp.is_active() {
        return ""
    }

    const diagnostics = grim.lsp.diagnostics()

    if diagnostics.error > 0 {
        return " E:" + diagnostics.error
    }
    if diagnostics.warning > 0 {
        return " W:" + diagnostics.warning
    }

    return " âœ“"
}

// Position component
fn get_position_component() {
    const pos = grim.cursor.position()
    const total = grim.buffer.line_count()

    return pos.line + ":" + pos.col + " / " + total
}

// Update status line
fn update_status() {
    grim.status_line.refresh()
}

// Commands
fn toggle_git() {
    config.show_git = !config.show_git
    update_status()
    grim.notify("Git info " + (config.show_git ? "enabled" : "disabled"))
}

fn toggle_lsp() {
    config.show_lsp = !config.show_lsp
    update_status()
    grim.notify("LSP info " + (config.show_lsp ? "enabled" : "disabled"))
}

// Teardown
export fn teardown() {
    print("Status Line plugin unloaded!")
}
